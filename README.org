* About

Poor efficiency calculator demo, using *regexp* and *cmd/yacc*, use *regexp* to simulate *lex*.

The goal of this repository is *making syntax simple*, without considering efficiency.
* About goyacc

According to https://golang.org/doc/go1.8:

The yacc tool (previously available by running "go tool yacc") has been removed. As of Go 1.7 it was no longer used by the Go compiler. It has moved to the "tools" repository and is now available at [[https://godoc.org/golang.org/x/tools/cmd/goyacc][golang.org/x/tools/cmd/goyacc]]

* Example
#+BEGIN_SRC sh
  > 3*2.2**10
  7967.976837
  > 2^(8+1)
  512.000000
  > ExIt
  Quit now ~
#+END_SRC
* Sub directories

[[./v1][v1]] shows a normal way, just write rules in yacc

[[./ast][ast]] uses AST node and a *eval* function

[[./pro][pro]] shows a complete, tiny language

#+BEGIN_SRC sh
  > defun demo(a,b) {if(a>b){a/b;}else{a**b}}
  definded demo
  > > demo(3,4)
   =   81
  > demo(4,3)
   = 1.333
  > quit
  Quit now ~
#+END_SRC
